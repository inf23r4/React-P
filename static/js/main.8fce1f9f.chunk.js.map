{"version":3,"sources":["components/GetTodos.jsx","components/pagination.jsx","App.js","reportWebVitals.js","index.js"],"names":["getTodos","a","fetch","res","json","todo","renderData","map","index","title","Pagination","useState","setTodo","currentPage","setCurrentPage","itemsPerPage","setItemsperPage","pageNumbersList","maxPageNumbersList","setMaxPageNumbersList","minPageNumbersList","setMinPageNumbersList","handleClick","event","Number","target","id","pages","i","Math","ceil","length","push","indexOfLastItem","indexOfFirstItem","currentItems","slice","renderPageNumbers","number","onClick","className","useEffect","then","newTodo","pageIncrementBtn","disabled","pageDecrementBtn","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8fce1f9f.chunk.js","sourcesContent":["const getTodos = async ()=> {\r\n    const url = \"https://jsonplaceholder.typicode.com/todos\";\r\n    const res = await fetch(url);\r\n    const todo = await res.json();\r\n\r\n    return todo;\r\n};\r\nexport default getTodos;","import React, { useState, useEffect } from 'react'\r\nimport getTodos from './GetTodos'\r\nimport \"./styles.css\"\r\n\r\nconst renderData = (todo) => {\r\n    return(\r\n        <ul>\r\n            {todo.map((todo, index) =>{\r\n                return <li key={index}>{todo.title}</li>\r\n            })}\r\n        </ul>\r\n    );\r\n};\r\n\r\n\r\nfunction Pagination() {\r\n\r\n    const [todo, setTodo] = useState([]);\r\n\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [itemsPerPage, setItemsperPage] = useState(5);\r\n\r\n    const [pageNumbersList, setPageNumbersList] = useState(5);\r\n    const [maxPageNumbersList, setMaxPageNumbersList] = useState(5);\r\n    const [minPageNumbersList, setMinPageNumbersList] = useState(0);\r\n\r\n    const handleClick = (event)=>{\r\n        setCurrentPage(Number(event.target.id))\r\n    }\r\n    const handleNextBtn =()=>{\r\n        setCurrentPage(currentPage+1);\r\n        if(currentPage +1 > maxPageNumbersList){\r\n            setMaxPageNumbersList(maxPageNumbersList + pageNumbersList);\r\n            setMinPageNumbersList(minPageNumbersList + pageNumbersList);\r\n        }\r\n    }\r\n    const handlePrevBtn =()=>{\r\n        setCurrentPage(currentPage-1);\r\n        if((currentPage -1 )% pageNumbersList === 0){\r\n            setMaxPageNumbersList(maxPageNumbersList - pageNumbersList);\r\n            setMinPageNumbersList(minPageNumbersList - pageNumbersList);\r\n        }\r\n    }\r\n    const nextPage = () =>{\r\n        setCurrentPage(currentPage + pageNumbersList);\r\n        setMaxPageNumbersList(maxPageNumbersList + pageNumbersList);\r\n        setMinPageNumbersList(minPageNumbersList + pageNumbersList);\r\n    };\r\n    const prevPage = () =>{\r\n        setCurrentPage(currentPage - pageNumbersList);\r\n        setMaxPageNumbersList(maxPageNumbersList - pageNumbersList);\r\n        setMinPageNumbersList(minPageNumbersList - pageNumbersList);\r\n    };\r\n    const handleLoadMore = ()=>{\r\n        setItemsperPage(itemsPerPage + 5);\r\n    };\r\n    const pages = [];\r\n    for (let i = 1; i <= Math.ceil(todo.length / itemsPerPage); i++){\r\n        pages.push(i);\r\n    }\r\n    const indexOfLastItem = currentPage * itemsPerPage;\r\n    const indexOfFirstItem = indexOfLastItem - itemsPerPage;\r\n    const currentItems = todo.slice(indexOfFirstItem, indexOfLastItem)\r\n\r\n\r\n\r\n    const renderPageNumbers = pages.map((number) =>{\r\n        if(number < maxPageNumbersList+1 && number > minPageNumbersList){\r\n            return (\r\n                <li key ={number} id={number} onClick={handleClick}\r\n                className={currentPage === number ? \"active\":null}>\r\n                    {number}\r\n                </li>\r\n            );\r\n        }else{\r\n            return null\r\n        }\r\n    });\r\n\r\n    const updateTodo = () => {\r\n        getTodos()\r\n            .then((newTodo)=>{\r\n                setTodo(newTodo)\r\n            })\r\n    }\r\n    useEffect(() => {\r\n        updateTodo();\r\n    }, []\r\n    );\r\n    \r\n\r\n    let pageIncrementBtn = null;\r\n    if(pages.length > maxPageNumbersList){\r\n        pageIncrementBtn = <li onClick={nextPage}\r\n        disabled={currentPage === pages[pages.length -1 ]? true : false}>&hellip;</li>\r\n    }\r\n    let pageDecrementBtn = null;\r\n    if( minPageNumbersList >= 1){\r\n        pageDecrementBtn = <li onClick={prevPage}\r\n        disabled={currentPage === pages[0]? true : false}>&hellip;</li>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>Todo App</h1><br/>\r\n            {renderData(currentItems)}\r\n            <ul className=\"pageNumbers\">\r\n                {pageDecrementBtn}\r\n                <li>\r\n                    <button onClick={handlePrevBtn} \r\n                    disabled={currentPage === pages[0]? true : false}>prev</button>\r\n                </li>\r\n                {renderPageNumbers}\r\n                <li>\r\n                    <button onClick={handleNextBtn}\r\n                    disabled={currentPage === pages[pages.length -1 ]? true : false}>next</button>\r\n                </li>\r\n                {pageIncrementBtn}\r\n                </ul>\r\n                <button onClick={handleLoadMore} className=\"loadmore\">Load More</button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Pagination;\r\n","import './App.css';\nimport Pagination from './components/pagination';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <Pagination/>\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}